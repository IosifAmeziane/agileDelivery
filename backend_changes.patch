Index: src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileStory.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileStory.java b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileStory.java
--- a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileStory.java	(revision bb2160ca4c17c53fd29d6ca1d5e4f6047abe3b28)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileStory.java	(date 1609934558021)
@@ -11,8 +11,6 @@
     @GeneratedValue
     private Long id;
 
-    //TODO: add Sprint once implemeneted
-
     private Integer storyPoints;
 
     private String name;
@@ -90,4 +88,12 @@
     public Integer getStoryPoints() {
         return storyPoints;
     }
+
+    @Override
+    public String toString() {
+        return "AgileStory{" +
+                "name='" + name + '\'' +
+                ", assignedUser=" + assignedUser +
+                '}';
+    }
 }
Index: src/main/java/sda/projectManagementTool/projectManagement/controller/BasicAuthLoginController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/controller/BasicAuthLoginController.java b/src/main/java/sda/projectManagementTool/projectManagement/controller/BasicAuthLoginController.java
new file mode 100644
--- /dev/null	(date 1610097606261)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/controller/BasicAuthLoginController.java	(date 1610097606261)
@@ -0,0 +1,17 @@
+package sda.projectManagementTool.projectManagement.controller;
+
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.RequestMapping;
+import org.springframework.web.bind.annotation.RestController;
+import sda.projectManagementTool.projectManagement.dto.LoginMessage;
+
+@RestController
+@RequestMapping(path = "/login")
+public class BasicAuthLoginController {
+
+    @GetMapping
+    public LoginMessage loginInitiated() {
+        return new LoginMessage("Login succesful");
+    }
+
+}
Index: src/main/resources/application.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.properties b/src/main/resources/application.properties
--- a/src/main/resources/application.properties	(revision bb2160ca4c17c53fd29d6ca1d5e4f6047abe3b28)
+++ b/src/main/resources/application.properties	(date 1610097430737)
@@ -1,7 +1,7 @@
 spring.datasource.url=jdbc:mysql://localhost:3306/sdaJiraBord2?createDatabaseIfNotExist=true
 spring.datasource.username=root
 spring.datasource.password=Root123456
-server.port=8081
+server.port=8080
 spring.jpa.hibernate.ddl-auto=update
 
 spring.mail.host=smtp.gmail.com
@@ -10,4 +10,4 @@
 spring.mail.password=5trongPa55word
 spring.mail.properties.mail.smtp.auth=true
 spring.mail.properties.mail.smtp.starttls.enable=true
-spring.mail.properties.mail.smtp.ssl.enable=true
\ No newline at end of file
+spring.mail.properties.mail.smtp.ssl.enable=true
Index: src/main/java/sda/projectManagementTool/projectManagement/dto/LoginMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/dto/LoginMessage.java b/src/main/java/sda/projectManagementTool/projectManagement/dto/LoginMessage.java
new file mode 100644
--- /dev/null	(date 1610097424656)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/dto/LoginMessage.java	(date 1610097424656)
@@ -0,0 +1,17 @@
+package sda.projectManagementTool.projectManagement.dto;
+
+public class LoginMessage {
+    private String message;
+
+    public String getMessage() {
+        return message;
+    }
+
+    public void setMessage(String message) {
+        this.message = message;
+    }
+
+    public LoginMessage(String message) {
+        this.message = message;
+    }
+}
Index: src/main/java/sda/projectManagementTool/projectManagement/config/SecurityConfiguration.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/config/SecurityConfiguration.java b/src/main/java/sda/projectManagementTool/projectManagement/config/SecurityConfiguration.java
--- a/src/main/java/sda/projectManagementTool/projectManagement/config/SecurityConfiguration.java	(revision bb2160ca4c17c53fd29d6ca1d5e4f6047abe3b28)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/config/SecurityConfiguration.java	(date 1610126546269)
@@ -1,27 +1,35 @@
 package sda.projectManagementTool.projectManagement.config;
 
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.beans.factory.annotation.Qualifier;
 import org.springframework.context.annotation.Bean;
 import org.springframework.context.annotation.Configuration;
-import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
+import org.springframework.http.HttpMethod;
 import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
 import org.springframework.security.config.annotation.web.builders.HttpSecurity;
+import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
 import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
 import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
 import org.springframework.security.crypto.password.PasswordEncoder;
 import org.springframework.stereotype.Component;
+import org.springframework.web.cors.CorsConfiguration;
+import org.springframework.web.cors.CorsConfigurationSource;
+import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
+import org.springframework.web.servlet.config.annotation.CorsRegistry;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;
+import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;
 import sda.projectManagementTool.projectManagement.repository.model.UserType;
 import sda.projectManagementTool.projectManagement.service.implementation.SdaUserDetailsService;
 
+import java.util.Arrays;
+
 @Component
 @Configuration
+@EnableWebSecurity
 public class SecurityConfiguration extends WebSecurityConfigurerAdapter {
 
-    private SdaUserDetailsService sdaUserDetailsService;
+    private final SdaUserDetailsService sdaUserDetailsService;
 
     public SecurityConfiguration(SdaUserDetailsService userDetailsService) {
-        this.sdaUserDetailsService  = userDetailsService;
+        this.sdaUserDetailsService = userDetailsService;
     }
 
     // AuthenticationManagerBuilder - clasa care se ocupa cu partea
@@ -39,18 +47,29 @@
     protected void configure(HttpSecurity http) throws Exception {
         // Role si Authority sunt sinonime - reprezinta acelasi lucru
         // TODO: adaugare restrictii pentru endpoint-urile noi definite
-        http.antMatcher("/**")
+        http.csrf().disable()
                 .authorizeRequests()
+                .antMatchers(HttpMethod.OPTIONS, "/**").permitAll()
+                .antMatchers("/login").permitAll()
                 .antMatchers("/users").permitAll()
                 .antMatchers("/hello-dev").hasAuthority(UserType.DEVELOPER.name()) // Securizam endpointul de hello-dev si-l facem accesibil doar pentru utilizatori cu role de DEVELOPER
                 .antMatchers("/hello-pm").hasAuthority(UserType.PROJECT_MANAGER.name()) // Securizam endpointul de hello-pm si-l facem accesibil doar pentru utilizatori cu role de PROJECT_MANAGER
                 .anyRequest() // precizam ca request-urile anterior configurate trebuie sa fie autorizate (adica trebuie sa avem un user logat)
                 .authenticated()
                 .and()
-                .formLogin() // daca nu, activam formLogin-ul (pagina de Login)
-                .and()
-                .csrf()
-                .disable();
+                .httpBasic();
+    }
+
+    @Bean
+    public WebMvcConfigurer corsConfigurer() {
+        return new WebMvcConfigurerAdapter() {
+            @Override
+            public void addCorsMappings(CorsRegistry registry) {
+                registry.addMapping("/**")
+                        .allowedMethods("*")
+                        .allowedOrigins("http://localhost:4200", "http://localhost:8080");
+            }
+        };
     }
 
     @Bean
Index: src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileSprint.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileSprint.java b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileSprint.java
new file mode 100644
--- /dev/null	(date 1609934558017)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/AgileSprint.java	(date 1609934558017)
@@ -0,0 +1,78 @@
+package sda.projectManagementTool.projectManagement.repository.model;
+
+import org.springframework.format.annotation.DateTimeFormat;
+
+import javax.persistence.*;
+import java.time.LocalDate;
+import java.util.List;
+
+@Entity
+public class AgileSprint {
+    @Id
+    @GeneratedValue
+    private Long id;
+
+    @DateTimeFormat
+    private LocalDate startDate;
+
+    @DateTimeFormat
+    private LocalDate endDate;
+
+    @OneToMany
+    private List<AgileStory> agileStories;
+
+    @ManyToOne
+    @JoinColumn (name = "project_id")
+    private Project project;
+
+
+    public Long getId() {
+        return id;
+    }
+
+    public void setId(Long id) {
+        this.id = id;
+    }
+
+    public LocalDate getStartDate() {
+        return startDate;
+    }
+
+    public void setStartDate(LocalDate startDate) {
+        this.startDate = startDate;
+    }
+
+    public LocalDate getEndDate() {
+        return endDate;
+    }
+
+    public void setEndDate(LocalDate endDate) {
+        this.endDate = endDate;
+    }
+
+    public List<AgileStory> getAgileStories() {
+        return agileStories;
+    }
+
+    public void setAgileStories(List<AgileStory> agileStories) {
+        this.agileStories = agileStories;
+    }
+
+    public Project getProject() {
+        return project;
+    }
+
+    public void setProject(Project project) {
+        this.project = project;
+    }
+
+    @Override
+    public String toString() {
+        return "AgileSprint{" +
+                "startDate=" + startDate +
+                ", endDate=" + endDate +
+                ", agileStories=" + agileStories +
+                ", project=" + project +
+                '}';
+    }
+}
Index: src/main/java/sda/projectManagementTool/projectManagement/repository/AgileSprintRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/repository/AgileSprintRepository.java b/src/main/java/sda/projectManagementTool/projectManagement/repository/AgileSprintRepository.java
new file mode 100644
--- /dev/null	(date 1609938563064)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/repository/AgileSprintRepository.java	(date 1609938563064)
@@ -0,0 +1,19 @@
+package sda.projectManagementTool.projectManagement.repository;
+
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.CrudRepository;
+import sda.projectManagementTool.projectManagement.repository.model.AgileSprint;
+
+import java.time.LocalDate;
+import java.time.LocalDateTime;
+import java.util.List;
+
+public interface AgileSprintRepository extends CrudRepository<AgileSprint, Long> {
+
+    @Query("SELECT agileSprint from AgileSprint agileSprint WHERE agileSprint.startDate <= :endDate and agileSprint.endDate >= :starDate and agileSprint.project.id = :projectId" )
+    List<AgileSprint> getSprintInIntervalAndWithProjectId(LocalDate starDate, LocalDate endDate, Long projectId);
+
+    @Query("SELECT agileSprint from AgileSprint agileSprint WHERE agileSprint.endDate <= :currentDate and agileSprint.project.id = :projectId")
+    List<AgileSprint> getCompletedSprintsByProjectId(LocalDate currentDate, Long projectId);
+
+}
Index: src/main/java/sda/projectManagementTool/projectManagement/service/AgileSprintService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/service/AgileSprintService.java b/src/main/java/sda/projectManagementTool/projectManagement/service/AgileSprintService.java
new file mode 100644
--- /dev/null	(date 1609933924710)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/service/AgileSprintService.java	(date 1609933924710)
@@ -0,0 +1,11 @@
+package sda.projectManagementTool.projectManagement.service;
+
+import sda.projectManagementTool.projectManagement.repository.AgileSprintRepository;
+import sda.projectManagementTool.projectManagement.repository.model.AgileSprint;
+
+public interface AgileSprintService {
+
+    AgileSprint save(AgileSprint agileSprint);
+    AgileSprint findByProject(String projectName);
+
+}
Index: src/main/java/sda/projectManagementTool/projectManagement/service/implementation/AgileSprintServiceImplementation.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/service/implementation/AgileSprintServiceImplementation.java b/src/main/java/sda/projectManagementTool/projectManagement/service/implementation/AgileSprintServiceImplementation.java
new file mode 100644
--- /dev/null	(date 1609933924714)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/service/implementation/AgileSprintServiceImplementation.java	(date 1609933924714)
@@ -0,0 +1,26 @@
+package sda.projectManagementTool.projectManagement.service.implementation;
+
+import org.springframework.stereotype.Component;
+import sda.projectManagementTool.projectManagement.repository.AgileSprintRepository;
+import sda.projectManagementTool.projectManagement.repository.model.AgileSprint;
+import sda.projectManagementTool.projectManagement.service.AgileSprintService;
+
+@Component
+public class AgileSprintServiceImplementation implements AgileSprintService {
+
+    private final AgileSprintRepository agileSprintRepository;
+
+    public AgileSprintServiceImplementation(AgileSprintRepository agileSprintRepository) {
+        this.agileSprintRepository = agileSprintRepository;
+    }
+
+    @Override
+    public AgileSprint save(AgileSprint agileSprint) {
+        return agileSprintRepository.save(agileSprint);
+    }
+
+    @Override
+    public AgileSprint findByProject(String projectName) {
+        return null;
+    }
+}
Index: src/test/java/sda/projectManagementTool/projectManagement/repository/AgileRepositoryTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/sda/projectManagementTool/projectManagement/repository/AgileRepositoryTest.java b/src/test/java/sda/projectManagementTool/projectManagement/repository/AgileRepositoryTest.java
new file mode 100644
--- /dev/null	(date 1609938656493)
+++ b/src/test/java/sda/projectManagementTool/projectManagement/repository/AgileRepositoryTest.java	(date 1609938656493)
@@ -0,0 +1,123 @@
+package sda.projectManagementTool.projectManagement.repository;
+
+import com.sun.tools.javac.util.List;
+import org.junit.Test;
+import org.junit.jupiter.api.Assertions;
+import org.junit.runner.RunWith;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
+import org.springframework.test.context.junit4.SpringRunner;
+import sda.projectManagementTool.projectManagement.repository.model.*;
+
+import java.time.LocalDate;
+
+import static org.junit.jupiter.api.Assertions.*;
+
+@RunWith(SpringRunner.class)
+@DataJpaTest
+public class AgileRepositoryTest {
+
+    @Autowired
+    private UserRepository userRepository;
+
+    @Autowired
+    private ProjectRepository projectRepository;
+
+    @Autowired
+    private AgileStoryRepository agileStoryRepository;
+
+    @Autowired
+    private AgileSprintRepository agileSprintRepository;
+
+
+    @Test
+    public void testCreateAgileRepository() {
+        User user = new User("username", "email@gmail.com", "passowrd");
+        User db = userRepository.save(user);
+
+        User user2 = new User("username2", "email2@gmail.com", "passowrd");
+        User db2 = userRepository.save(user2);
+
+        User user3 = new User("username3", "email3@gmail.com", "passowrd");
+        User db3 = userRepository.save(user3);
+
+
+        Project project = new Project();
+        project.setName("New project");
+        project.setDescription("desc");
+        project.setAdministrator(db);
+        project.setAssignedUsers(List.of(db2, db3));
+
+        Project dbProject = projectRepository.save(project);
+
+        AgileStory agileStory = new AgileStory();
+        agileStory.setStatus(AgileStoryStatus.DONE);
+        agileStory.setAssignedUser(db2);
+        agileStory.setName("DONE story");
+        agileStory.setWeight(2);
+
+        AgileStory agileStory2 = new AgileStory();
+        agileStory2.setStatus(AgileStoryStatus.IN_PROGRESS);
+        agileStory2.setAssignedUser(db2);
+        agileStory2.setName("In progress story");
+        agileStory2.setWeight(2);
+
+        AgileStory dbAgileStory = agileStoryRepository.save(agileStory);
+        AgileStory dbAgileStory2 = agileStoryRepository.save(agileStory2);
+
+        AgileSprint agileSprint = new AgileSprint();
+        agileSprint.setProject(dbProject);
+        agileSprint.setStartDate(LocalDate.now());
+        agileSprint.setEndDate(LocalDate.now().plusDays(14));
+        agileSprint.setAgileStories(List.of(dbAgileStory, dbAgileStory2));
+
+        AgileSprint agileSprintDb = agileSprintRepository.save(agileSprint);
+        System.out.println(agileSprintDb.toString());
+
+        java.util.List<AgileSprint> agileSprintsOverlapping = agileSprintRepository.getSprintInIntervalAndWithProjectId(LocalDate.now().plusDays(5), LocalDate.now().plusDays(17), dbProject.getId());
+        assertTrue(agileSprintsOverlapping.size() > 0);
+        java.util.List<AgileSprint> agileSprintsNotOverlapping = agileSprintRepository.getSprintInIntervalAndWithProjectId(LocalDate.now().plusDays(15), LocalDate.now().plusDays(29), dbProject.getId());
+        assertEquals(agileSprintsNotOverlapping.size(), 0);
+    }
+
+    @Test
+    public void checkCompletedSprintsEquals2() {
+        User user = new User("username", "email@gmail.com", "passowrd");
+        User db = userRepository.save(user);
+
+        User user2 = new User("username2", "email2@gmail.com", "passowrd");
+        User db2 = userRepository.save(user2);
+
+        User user3 = new User("username3", "email3@gmail.com", "passowrd");
+        User db3 = userRepository.save(user3);
+
+
+        Project project = new Project();
+        project.setName("New project");
+        project.setDescription("desc");
+        project.setAdministrator(db);
+        project.setAssignedUsers(List.of(db2, db3));
+
+        Project dbProject = projectRepository.save(project);
+
+        AgileSprint agileSprint = new AgileSprint();
+        agileSprint.setProject(dbProject);
+        agileSprint.setStartDate(LocalDate.now().minusDays(29));
+        agileSprint.setEndDate(LocalDate.now().minusDays(15));
+
+        AgileSprint agileSprint2 = new AgileSprint();
+        agileSprint2.setProject(dbProject);
+        agileSprint2.setStartDate(LocalDate.now().minusDays(14));
+        agileSprint2.setEndDate(LocalDate.now());
+
+
+        agileSprintRepository.save(agileSprint);
+        agileSprintRepository.save(agileSprint2);
+
+        assertEquals(2, agileSprintRepository.getCompletedSprintsByProjectId(LocalDate.now(), dbProject.getId()).size());
+        assertEquals(1, agileSprintRepository.getCompletedSprintsByProjectId(LocalDate.now().minusDays(14), dbProject.getId()).size());
+        assertEquals(0, agileSprintRepository.getCompletedSprintsByProjectId(LocalDate.now().minusDays(16), dbProject.getId()).size());
+
+    }
+
+}
Index: src/main/java/sda/projectManagementTool/projectManagement/repository/model/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/User.java b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/User.java
--- a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/User.java	(revision bb2160ca4c17c53fd29d6ca1d5e4f6047abe3b28)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/User.java	(date 1609934098517)
@@ -117,4 +117,12 @@
     public void setRoles(Set<Role> roles) {
         this.roles = roles;
     }
+
+    @Override
+    public String toString() {
+        return "User{" +
+                "id=" + id +
+                ", username='" + username + '\'' +
+                '}';
+    }
 }
Index: src/main/java/sda/projectManagementTool/projectManagement/repository/model/Project.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/Project.java b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/Project.java
--- a/src/main/java/sda/projectManagementTool/projectManagement/repository/model/Project.java	(revision bb2160ca4c17c53fd29d6ca1d5e4f6047abe3b28)
+++ b/src/main/java/sda/projectManagementTool/projectManagement/repository/model/Project.java	(date 1609934098514)
@@ -73,4 +73,15 @@
     public void setAssignedUsers(List<User> assignedUsers) {
         this.assignedUsers = assignedUsers;
     }
+
+    @Override
+    public String toString() {
+        return "Project{" +
+                "id=" + id +
+                ", name='" + name + '\'' +
+                ", description='" + description + '\'' +
+                ", user=" + user +
+                ", assignedUsers=" + assignedUsers +
+                '}';
+    }
 }
